vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
swirl()
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first
| function!')
boring_function('My first function!')
play()
mean
nxt()
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(SOS)
telegram("SOS")
play()
nxt()
submit()
mad_libs("Kazakhstan", "fat", "gym")
play()
mad_libs(place = "Kazakhstan", adjectiv = "fat", noun = "gym")
mad_libs(place = "Kazakhstan", adjective = "fat", noun = "gym")
nxt()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
?lapply
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ , 11:17]
head(flag_colors)
?apply
?lapply
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(flags, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
apply(flags, unique)
sapply(flags, unique)
?vapply
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
bye()
swirl()
library('swirl')
rm(list=ls())
swirl()
names(plants)
head(plants)
head(plants, 10)
tail(plants, 14)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
letters
sample(letters)
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(10, 5)
rpois(5, 10)
?rpois
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois_
)
cm <- colMeans(my_pois)
hist(cm)
shiny()
library('shiny')
shiny()
library(shiny)
library(swirl)
rm(list=ls())
swirl()
d1 <- Sys.Date*()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
args(Sys.time)
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months((t1))
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - 1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
bye()
library('swirl')
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, title = "My Plot")
plot(cars, main = "My Plot")
warnings()
plot(cars, sub = "My Plot Subtitle")
?pars
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
str(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
destfile = "temp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "temp")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "temp.csv")
testDF <- read.table("temp.csv")
names(testDF)
testDF <- read.csv("temp.csv")
names(testDF)
length(which(testDF$VAL >= 14))
length(which(testDF$VAL >= 24))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "temp.xlsx")
install.packages("xlsx")
load(xlsx)
load("xlsx")
library("xlsx")
install.packages("rJava")
library(rJava)
library("rJava")
library('rJava')
install.packages(c("evaluate", "git2r", "knitr"))
library('rJava')
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava', repos='http://www.rforge.net/')
if (Sys.getenv("JAVA_HOME")!="") Sys.setenv(JAVA_HOME="") library(rJava)
if(Sys.getenv("JAVA_HOME")!="") Sys.setenv(JAVA_HOME="") library(rJava)
if(Sys.getenv("JAVA_HOME")!="") {
Sys.setenv(JAVA_HOME="")
library(rJava)
}
library(rJava)
Sys.setenv(JAVA_HOME="")
library(rJava)
install.packages("openxlsx")
library('openxlsx')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "temp.xlsx")
testDF <- read.xlsx("temp.xlsx")
testDF <- read.xlsx("temp")
testDF <- read.xlsx(temp)
testDF <- read.xlsx("temp.xlsx")
install.packages("XLConnect")
library(XLConnect)
install.packages(gdata)
install.packages("gdata")
library(gdata)
installXLSXsupport()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "temp.csv")
testDF <- read.csv("temp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "temp.xlsx")
testDF <- read.xlsx("temp.xlsx")
read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "temp1.xlsx")
testDF <- read.xlsx("temp1.xlsx")
?read.xlsx
dat <- read.xlsx("temp1.xlsx", rows = 18:23, cols = 7:15)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "temp1.xlsx")
dat <- read.xlsx("temp1.xlsx", rows = 18:23, cols = 7:15)
dat <- read.csv("temp1.csv")
dat <- read.csv("temp.csv")
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
destfile = "temp1.xml")
doc <- xmlTreeParse(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml, useInternal = T)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = T)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
destfile = "temp1.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = T)
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = T)
rootNode = xmlRoot(doc)
xmlName(rootNode)
names(rootNOde)
names(rootNode)
xmlSApply(rootNode, xmlValue)
names(rootNode)
xmlSApply(rootNode, names)
xmlSApply(rootNode, xmlName)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
length(which(xpathSApply(rootNode, "//zipcode", xmlValue) == "21231"))
?read.xlsx
dat = read.xlsx(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx,
rows = 18:23, cols = 7:15)
dat = read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
rows = 18:23, cols = 7:15)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",
destfile = "temp.csv")
testDF = read.csv("temp.csv")
DT = fread("temp.csv")
install.packages("data.table")
library(data.table)
DT = fread("temp.csv")
DT[,mean(pwgtp15),by=SEX]
system.time()
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15);
mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15);
mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15);
mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
postscript()
xfig()
windows()
mean(stepsPerDay[ , 2])
median(stepsPerDay[ , 2])
days <- length(unique(activity$date))
stepsPerDay <- ddply(activity, ~date, summarise, recorded_number_of_steps_taken = sum(steps))
stepsPerDay
hist(stepsPerDay[ , 2])
mean(stepsPerDay[ , 2])
median(stepsPerDay[ , 2])
library(knitr)
library(xtable)
library(plyr)
library(dplyr)
setwd("C:/Users/rgrillo/datasciencecoursera/RepData_PeerAssessment1")
activity <- read.csv(unzip(zipfile = "activity.zip", files = "activity.csv"))
days <- length(unique(activity$date))
stepsPerDay <- ddply(activity, ~date, summarise, recorded_number_of_steps_taken = sum(steps))
stepsPerDay
hist(stepsPerDay[ , 2])
mean(stepsPerDay[ , 2])
median(stepsPerDay[ , 2])
mean(stepsPerDay[ , 2], na.rm = TRUE)
median(stepsPerDay[ , 2], na.rm = TRUE)
avgDailyActivity <- ddply(activity, ~interval, summarise, recorded_number_of_steps_taken = mean(steps))
avgDailyActivity
?strptime
avgDailyActivity <- ddply(activity, ~interval, summarise, recorded_number_of_steps_taken = mean(steps, na.rm = TRUE))
avgDailyActivity
?plot
plot(x = avgDailyActivity[,1], y = avgDailyActivity[ , 2], type = "l")
which(max(avgDailyActivity[ , 2]))
which(avgDailyActivity[ , 2] == max(avgDailyActivity[ , 2]))
maxIntervalIdx <- which(avgDailyActivity[ , 2] == max(avgDailyActivity[ , 2]))
maxInterval <- avgDailyActivity[maxIntervalIdx, 1]
maxInterval
time <- maxInterval/60
time
time <- paste(floor(maxInterval), round((maxInterval-floor(maxInterval))*60), sep=":")
time
time <- maxInterval/60
time2 <- paste(floor(time), round((time-floor(time))*60), sep=":")
time2
numNA <- length(which(is.na(activity$steps)))
numNA
naIdx <- which(is.na(activity$steps))
NewActivity <- activity
for(i in nrow(NewActivity)) {
if(is.na(NewActivity[i, 1])) {
tmpIdx <- which(avgDailyActivity[ , 1] == NewActivity[i, 3])
NewActivity[i, 1] <- avgDailyActivity[tmpIdx, 2]
}
View(NewActivity)
nrow(NewActivity)
for(i in nrow(NewActivity)) {
if(is.na(NewActivity[i, 1])) {
tmpIdx <- which(avgDailyActivity[ , 1] == NewActivity[i, 3])
NewActivity[i, 1] <- avgDailyActivity[tmpIdx, 2]
}
is.na(NewActivity[i, 1])
i
for(i in 1:nrow(NewActivity)) {
if(is.na(NewActivity[i, 1])) {
tmpIdx <- which(avgDailyActivity[ , 1] == NewActivity[i, 3])
NewActivity[i, 1] <- avgDailyActivity[tmpIdx, 2]
}
View(NewActivity)
newStepsPerDay <- ddply(NewActivity, ~date, summarise, recorded_number_of_steps_taken = sum(steps))
newStepsPerDay
hist(newStepsPerDay[ , 2])
newMeanSteps <- mean(newStepsPerDay[ , 2], na.rm = TRUE)
newMedianSteps <- median(newStepsPerDay[ , 2], na.rm = TRUE)
newMeanSteps
newMedianSteps
?abs
diffMeanSteps <- abs(newMeanSteps - meanSteps)
diffMedianSteps <- abs(newMedianSteps - medianSteps)
meanSteps <- mean(stepsPerDay[ , 2], na.rm = TRUE)
medianSteps <- median(stepsPerDay[ , 2], na.rm = TRUE)
stepsPerDay
stepsPerDay <- ddply(activity, ~date, summarise, recorded_number_of_steps_taken = sum(steps, na.rm = TRUE))
stepsPerDay
hist(stepsPerDay[ , 2])
meanSteps <- mean(stepsPerDay[ , 2], na.rm = TRUE)
medianSteps <- median(stepsPerDay[ , 2], na.rm = TRUE)
diffMeanSteps <- abs(newMeanSteps - meanSteps)
diffMedianSteps <- abs(newMedianSteps - medianSteps)
diffMeanSteps
diffMedianSteps
?weekdays
NewActivity$weekdays = weekdays(NewActivity$date)
NewActivity$weekdays = class(NewActivity$date)
class(NewActivity$date)
as.POSIXct(NewActivity$date)
NewActivity$date = as.POSIXct(NewActivity$date)
class(NewActivity$date)
weekdays(NewActivity$date)
NewActivity$weekday_type <- if(NewActivity$weekday %in% c("Saturday", "Sunday")) {
"Weekend"
} else {"Weekday"}
if(NewActivity$weekday %in% c("Saturday", "Sunday")) {
NewActivity$weekday_type <- "Weekend"
} else {
NewActivity$weekday_type <- "Weekend"
}
NewActivity$weekday
NewActivity$weekday <- weekdays(NewActivity$date)
if(NewActivity$weekday %in% c("Saturday", "Sunday")) {
NewActivity$weekday_type <- "Weekend"
} else {
NewActivity$weekday_type <- "Weekend"
}
NewActivity$weekday
if(NewActivity$weekday %in% c("Saturday", "Sunday")) {
NewActivity$weekday_type <- "Weekend"
} else {
NewActivity$weekday_type <- "Weekend"
}
NewActivity$weekday_type
NewActivity$weekday
if(NewActivity$weekday %in% c("Saturday", "Sunday")) {
NewActivity$weekday_type <- "Weekend"
} else {
NewActivity$weekday_type <- "Weekday"
}
NewActivity$weekday
NewActivity$weekday_type
NewActivity$weekday %in% c("Saturday", "Sunday")
if(NewActivity$weekday %in% c("Saturday", "Sunday")) {
NewActivity$weekday_type <- "Weekend"
} else {
NewActivity$weekday_type <- "Weekday"
}
NewActivity$weekday_type
if(NewActivity$weekday == "Saturday") {
NewActivity$weekday_type <- "Weekend"
} else {
NewActivity$weekday_type <- "Weekday"
}
knitr("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
